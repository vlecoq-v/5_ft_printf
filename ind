ft_add_to_buff.c:	ft_strncpy(c->buff + c->ind++, s, 1);
ft_add_to_buff.c:	if (c->ind == BUFF_SZ)
ft_conv_to_str.c:	c->flg = 1;
ft_conv_to_str.c:	c->flg_tp.hstg = 1;
ft_conv_to_str.c:	ft_strcpy(c->sz_tp, "l");
ft_conv_to_str.c:	c->tp = 'x';
ft_conv_to_str.c:	ft_tp_conv_str(&c, (unsigned long)(c->arg));
ft_conv_to_str.c:	if (!(c->str))
ft_conv_to_str.c:	// printf("IN FT_c_TO_STR, c->tp = |%c|\n", c->tp);
ft_conv_to_str.c:	if (c->tp == 's' && !(c->str = ft_strdup((char*)c->arg)))
ft_conv_to_str.c:	if (c->tp == '%' && !(c->str = ft_strdup("%")))
ft_conv_to_str.c:	if (c->tp == 'c' && !(c->str = ft_strdup(" ")) && printf("hello 2\n"))
ft_conv_to_str.c:		if (!(c->str[0] = (char)c->arg)) // je me compresnds pas cette ligne
ft_conv_to_str.c:	if (c->tp == 'f')
ft_conv_to_str.c:	if (c->tp == 'p')
ft_conv_to_str.c:	if (c->tp == 'o' || c->tp == 'd' || c->tp == 'x' || c->tp == 'X' || c->tp == 'u')
ft_conv_to_str.c:	if (!c->str && c->tp != '!')
ft_conv_to_str.c:	c->str_l = ft_strlen(c->str);
ft_fill_arg.c:	if (c->tp != '%' && c->tp && c->tp != '!')
ft_fill_arg.c:		c->arg = va_arg(args, void*);
ft_fill_flag.c:		c->flg = 1;
ft_fill_flag.c:			c->flg_tp.mns = 1;
ft_fill_flag.c:			c->flg_tp.pls = 1;
ft_fill_flag.c:			c->flg_tp.zr = 1;
ft_fill_flag.c:		if (format[*i] == ' ' && !c->flg_tp.pls)
ft_fill_flag.c:			c->flg_tp.spc = 1;
ft_fill_flag.c:			c->flg_tp.hstg = 1;
ft_fill_flag.c:		if (c->flg_tp.spc && (c->flg_tp.pls || c->flg_tp.zr))
ft_fill_flag.c:			c->flg_tp.spc = 0;
ft_fill_prec.c:	c->prc = (format[*i] == '.' || c->prc) ? 1 : 0;
ft_fill_prec.c:	if (c->prc && format[*i] == '.')
ft_fill_prec.c:			c->prc_sz = ft_natoi((char*)format + *i - j, j);
ft_fill_prec.c:			c->prc_sz = va_arg(args, int);
ft_fill_prt_spc.c:	return ((c->tp == 'c' || c->tp == 's' || c->tp == 'o' || c->tp == 'u'
ft_fill_prt_spc.c:		|| c->tp == 'x' || c->tp == 'X' || c->tp == 'p'
ft_fill_prt_spc.c:		|| c->tp == '%') ? 1 : 0);
ft_fill_prt_spc.c:	return ((c->tp == 'c' || c->tp == 's') ? 1 : 0);
ft_fill_prt_spc.c:	c->prt_spc = 0;
ft_fill_prt_spc.c:	if (c->prc && c->prc_sz == 0)
ft_fill_prt_spc.c:		c->prt_spc = c->wdth;
ft_fill_prt_spc.c:	else if (!c->prc || (c->prc && c->prc_sz > c->str_l))
ft_fill_prt_spc.c:		if (!ft_chck_tp_1(c) && c->flg_tp.spc && !c->sn && c->wdth <= c->str_l)
ft_fill_prt_spc.c:			c->prt_spc = 1;
ft_fill_prt_spc.c:		else if (!ft_chck_tp_2(c) && c->prc_sz > c->str_l && !c->sn)
ft_fill_prt_spc.c:			c->prt_spc = c->prc_sz - c->str_l;
ft_fill_prt_spc.c:		else if (c->prc_sz > c->str_l && c->sn)
ft_fill_prt_spc.c:			c->prt_spc = c->prc_sz - c->str_l + 1;
ft_fill_prt_spc.c:		else if (!ft_chck_tp_1(c) && c->flg_tp.pls && c->wdth && !c->sn)
ft_fill_prt_spc.c:			c->prt_spc = c->wdth - c->str_l - 1;
ft_fill_prt_spc.c:		else if (c->wdth > c->str_l)
ft_fill_prt_spc.c:			c->prt_spc = c->wdth - c->str_l;
ft_fill_prt_spc.c:			c->prt_spc = 0;
ft_fill_prt_spc.c:	else if (c->prc && c->prc_sz != 0 && c->wdth > c->str_l)
ft_fill_prt_spc.c:		if (c->wdth > c->prc_sz && c->wdth > c->str_l)
ft_fill_prt_spc.c:			c->prt_spc = c->wdth - c->str_l;
ft_fill_prt_spc.c:			c->prt_spc = c->wdth - c->prc_sz;
ft_fill_size.c:	if (c->sz_tp[0] && ft_check_flag_size(format[*i]))
ft_fill_size.c:		c->sz = 1;
ft_fill_size.c:		c->sz_tp[j++] = format[(*i)++];
ft_fill_size.c:			c->sz_tp[j] = '\0';
ft_fill_size.c:	if (c->sz_tp[0] != c->sz_tp[1] && j > 1)
ft_fill_size.c:		c->sz_tp[1] = '\0';
ft_fill_struct.c:	c->flg = 0;
ft_fill_struct.c:	c->flg_tp.mns = 0;
ft_fill_struct.c:	c->flg_tp.pls = 0;
ft_fill_struct.c:	c->flg_tp.zr = 0;
ft_fill_struct.c:	c->flg_tp.spc = 0;
ft_fill_struct.c:	c->flg_tp.hstg = 0;
ft_fill_struct.c:	c->wdth = 0;
ft_fill_struct.c:	c->prc = 0;
ft_fill_struct.c:	c->prc_sz = 0;
ft_fill_struct.c:	c->sz = 0;
ft_fill_struct.c:	// printf("type = %c\n", c->tp);
ft_fill_struct.c:	// printf("====> FT_FILL_STRUCT || CHAR = %s FLAG ? %d // '-' %d // '+' %d // '0' %d // ' ' %d // '#' %d // ZR %d\n", format + *i, c->flg, c->flg_tp.mns, c->flg_tp.pls, c->flg_tp.zr, c->flg_tp.spc, c->flg_tp.hstg, c->flg_tp.zr);
ft_fill_struct.c:	// printf("====> FT_FILL_STRUCT || CHAR = %s // WIDTH EGALE %d\n", format + *i, c->wdth);
ft_fill_struct.c:	// printf("====> FT_FILL_STRUCT || PREC ? %d SIZE %d\n", c->prc, c->prc_sz);
ft_fill_struct.c:	// printf("====> FT_FILL_STRUCT || CHAR = %s //J = %d // SIZE ? %d SIZE %s\n", format + *i, j, c->sz, c->sz_tp);
ft_fill_struct.c:		// (*i) += (j > 0 && !c->tp) ? 0 : 1;
ft_fill_struct.c:	// printf("====> FT_FILL_STRUCT || CHAR = %s // TYPE ? |%c|\n", format + *i, c->tp);
ft_fill_struct.c:	// printf("====> FT_FILL_STRUCT || ARG ? %d\n", c->nbr);
ft_fill_type.c:		c->tp = format[(*i)++];
ft_fill_type.c:	else if (c->wdth)
ft_fill_type.c:		c->tp = '!';
ft_fill_type.c:	if (c->tp == 'i')
ft_fill_type.c:		c->tp = 'd';
ft_fill_width.c:			c->wdth = va_arg(args, int);
ft_fill_width.c:			if (c->wdth < 0)
ft_fill_width.c:				c->flg_tp.mns = 1;
ft_fill_width.c:			c->wdth = ft_natoi((char*)format + *i - j, j);
ft_itoa_b.c:	c->sn = (value < 0 && base == 10) ? 1 : 0;
ft_itoa_b.c:	if (!(s = (char*)malloc(sizeof(char) * (l + c->sn + 1))))
ft_itoa_b.c:	s[l-- + c->sn] = '\0';
ft_itoa_b.c:	while (l + c->sn >= 0 + c->sn)
ft_itoa_b.c:		s[l-- + c->sn] = (value % base < 10)
ft_print_conv.c:	// printf("PRINT CONV ====> FT_FILL_STRUCT || ARG ? %d\n", (int)c->arg);
ft_print_conv.c:	// printf("PRINT CONV ====> FT_CONV_TO_STR || ARG ? %s\n", c->str);
ft_print_conv.c:	// printf("PRINT CONV ====> FT_FILL_PRT_SPC || ARG ? %s\n", c->str);
ft_print_conv.c:	// ft_strdel(&c->str);
ft_print_flg.c:	if ((c->flg_tp.zr && c->sn) || (c->prc && c->sn) || c->sn)
ft_print_flg.c:	if (c->flg_tp.pls && !c->sn && c->tp == 'd')
ft_print_str.c:	if (c->tp == 's' || c->tp == '%' || c->tp == '!')
ft_print_str.c:	if (c->tp == 'c')
ft_print_str.c:	if (c->tp == 'd' || c->tp == 'u' || c->tp == 'x'
ft_print_str.c:		|| c->tp == 'X' || c->tp == 'o' || c->tp == 'p')
ft_print_tp_c.c:	if (!c->flg_tp.mns)
ft_print_tp_c.c:		ft_add_to_buff(c, (char*)&c->arg);
ft_print_tp_c.c:	else if (c->flg_tp.mns)
ft_print_tp_c.c:		ft_add_to_buff(c, (char*)&c->arg);
ft_print_tp_d.c:	if (!c->flg_tp.mns)
ft_print_tp_d.c:	c->sn ? ft_putbuff(c, ++c->str) : ft_putbuff(c, c->str);
ft_print_tp_d.c:	if (c->flg_tp.mns)
ft_print_tp_d.c:	if ((c->wdth > c->prc_sz) && c->prc_sz > c->str_l)
ft_print_tp_d.c:		while (c->wdth-- > c->prc_sz + c->sn)
ft_print_tp_d.c:	if ((c->flg_tp.zr && c->wdth > c->str_l) || c->prc_sz > c->str_l)
ft_print_tp_s.c:	// printf("FT_PRINT_TP_S PRC_SZ = %d\n", c->prc_sz);
ft_print_tp_s.c:	if ((!c->flg_tp.mns && !c->prc) || (c->tp == '%' && c->prc) || (c->tp == '!'))
ft_print_tp_s.c:		ft_putbuff(c, c->str);
ft_print_tp_s.c:	else if (c->flg_tp.mns || c->prc)
ft_print_tp_s.c:		if (!c->prc || (c->prc && c->prc_sz > c->str_l))
ft_print_tp_s.c:			ft_putbuff(c, c->str);
ft_print_tp_s.c:			while (c->prc_sz--)
ft_print_tp_s.c:				ft_add_to_buff(c, (((char*)c->str) + x++));
ft_print_tp_s.c:	else if (c->prc && c->prc_sz == 0)
ft_printf.c:	c->cmpt = 0;
ft_printf.c:	c->ind = 0;
ft_printf.c:	write(1, c->buff, ft_strlen(c->buff));
ft_printf.c:	return (c->cmpt + ft_strlen(c->buff));
ft_prt_spc.c:	return ((c->tp == 'd' || c->tp == 'o' || c->tp == 'u'
ft_prt_spc.c:		|| c->tp == 'x' || c->tp == 'X') ? 1 : 0);
ft_prt_spc.c:	// printf("prt+spc = %d\n", c->prt_spc);
ft_prt_spc.c:	while (c->prt_spc--)
ft_prt_spc.c:		((!c->flg_tp.mns && !c->prc && c->flg_tp.zr) || 
ft_prt_spc.c:		(ft_chck_tp(c) && c->prc_sz > c->str_l)) ?
ft_reset_buff.c:	c->ind = 0;
ft_reset_buff.c:	c->cmpt += BUFF_SZ;
ft_reset_buff.c:	write(1, c->buff, ft_strlen(c->buff));
ft_reset_buff.c:	ft_bzero(c->buff, BUFF_SZ);
